<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ac.liverpool.forum.mapper.ConversationMapper">

    <resultMap id="conversationMap" type="ac.liverpool.forum.entity.Conversation">
        <id column="id" property="id"/>
        <result column="user1_id" property="user1Id"/>
        <result column="user2_id" property="user2Id"/>
        <result column="last_message" property="lastMessage"/>
        <result column="last_message_time" property="lastMessageTime"/>
        <result column="unread_count_user1" property="unreadCountUser1"/>
        <result column="unread_count_user2" property="unreadCountUser2"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
        <result column="is_deleted" property="isDeleted"/>
    </resultMap>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO conversation (
            user1_id, user2_id, last_message, last_message_time,
            unread_count_user1, unread_count_user2, create_time, update_time, is_deleted
        ) VALUES (
            #{user1Id}, #{user2Id}, #{lastMessage}, #{lastMessageTime},
            #{unreadCountUser1}, #{unreadCountUser2}, #{createTime}, #{updateTime}, #{isDeleted}
        )
    </insert>

    <update id="update">
        UPDATE conversation
        SET 
            last_message = #{lastMessage},
            last_message_time = #{lastMessageTime},
            unread_count_user1 = #{unreadCountUser1},
            unread_count_user2 = #{unreadCountUser2},
            update_time = #{updateTime},
            is_deleted = #{isDeleted}
        WHERE 
            id = #{id}
    </update>

    <select id="selectById" resultMap="conversationMap">
        SELECT * FROM conversation
        WHERE id = #{id} AND is_deleted = 0
    </select>

    <select id="findConversation" resultMap="conversationMap">
        SELECT * FROM conversation
        WHERE 
            ((user1_id = #{userId1} AND user2_id = #{userId2})
            OR 
            (user1_id = #{userId2} AND user2_id = #{userId1}))
            AND is_deleted = 0
        LIMIT 1
    </select>

    <select id="getConversations" resultMap="conversationMap">
        SELECT * FROM conversation
        WHERE 
            (user1_id = #{userId} OR user2_id = #{userId})
            AND is_deleted = 0
        ORDER BY last_message_time DESC
    </select>

    <select id="getUnreadCount" resultType="int">
        SELECT 
            SUM(
                CASE 
                    WHEN user1_id = #{userId} THEN unread_count_user1
                    WHEN user2_id = #{userId} THEN unread_count_user2
                    ELSE 0
                END
            ) AS total_unread
        FROM conversation
        WHERE 
            (user1_id = #{userId} OR user2_id = #{userId})
            AND is_deleted = 0
    </select>
</mapper> 